<?xml version="1.0" ?>
<robot name="isi_robot" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- ****************** ROBOT CONSTANTS *******************************  -->
  <!-- Define the size of the robot's main chassis in meters -->
  <!--<xacro:property name="base_width" value="0.190"/>
  <xacro:property name="base_length" value="0.70"/>
  <xacro:property name="base_height" value="0.20"/>-->

  <xacro:property name="base_width" value="0.190"/>
  <xacro:property name="base_length" value="0.70"/>
  <xacro:property name="base_height" value="0.020"/>
	
  <!-- Define the shape of the robot's two back wheels in meters -->
  <!--<xacro:property name="wheel_radius" value="0.14"/>
  <xacro:property name="wheel_width" value="0.06"/>-->

  <xacro:property name="wheel_radius" value="0.045"/>
  <xacro:property name="wheel_width" value="0.010"/>

  <!-- x-axis points forward, y-axis points to left, z-axis points upwards -->
  <!-- Define the gap between the wheel and chassis along y-axis in meters -->
  <!--<xacro:property name="wheel_ygap" value="0.035"/>-->

  <xacro:property name="wheel_ygap" value="0.035"/>

  <!-- Position the wheels along the z-axis -->
  <!--<xacro:property name="wheel_zoff" value="0.05"/>-->
  <xacro:property name="wheel_zoff" value="0.008"/>

  <!-- Position the wheels along the x-axis -->
<!--<xacro:property name="wheel_xoff" value="0.221"/>-->
  <xacro:property name="wheel_xoff" value="0.140"/>


  <!-- Position the caster wheel along the x-axis -->
  <xacro:property name="caster_xoff" value="0.140"/>

  <!-- Define intertial property macros  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="custom_shape" params="name">
    <link name="${name}">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <geometry>
          <mesh filename="package://automation_robot_description_pkg/meshes/robo_samarco.dae" />
        </geometry>
        <material name="custom_material">
          <color rgba="0.8 0.2 0.2 1.0" />
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <geometry>
          <mesh filename="package://automation_robot_description_pkg/meshes/robo_samarco.dae" />
        </geometry>
      </collision>
        <inertial>
          <mass value="1.0" />
          <inertia ixx="0.1" ixy="0.0" ixz="0.0"
                   iyy="0.1" iyz="0.0" izz="0.1" />
        </inertial>
    </link>
  </xacro:macro>


  <!-- ****************** ROBOT BASE FOOTPRINT ***************************  -->
  <!-- Define the center of the main robot chassis projected on the ground -->	
  <link name="base_footprint"/>

  <!-- The base footprint of the robot is located underneath the chassis -->
  <joint name="base_joint" type="fixed">
    <parent link="base_footprint"/>
    <child link="base_link" />
    <origin xyz="0.0 0.0 ${(wheel_radius+wheel_zoff)}" rpy="0 0 0"/>
  </joint>

  <!-- ********************** ROBOT BASE *********************************  -->
  <!--<link name="base_link">
    <visual>
      <origin xyz="0 0 -0.05" rpy="0.0 0 0.0"/>
      <geometry> -->
        <!--<box size="${base_length} ${base_width} ${base_height}"/>-->
        <!--<mesh>
          <uri>file://src/automation_robot_description_pkg/meshes/robo_samarco.dae</uri>
        </mesh>
      </geometry>
      <material name="Red">
        <color rgba="${255/255} ${0/255} ${0/255} 1.0"/>
      </material>
    </visual>

    <collision>
      <geometry>-->
        <!--<box size="${base_length} ${base_width} ${base_height}"/> -->
        <!--<mesh>
          <uri>file://src/automation_robot_description_pkg/meshes/robo_samarco.dae</uri>
        </mesh>
      </geometry>
      
    </collision>

    <xacro:box_inertia m="40.0" w="${base_width}" d="${base_length}" h="${base_height}"/>
    
  </link>-->

  <xacro:custom_shape name="base_link" />
  

  <!-- *********************** DRIVE WHEELS ******************************  -->

  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="1.5707963267949 0 0"/>
        <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="White">
          <color rgba="${255/255} ${255/255} ${255/255} 1.0"/>
        </material>
      </visual>
      
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>
      
      <xacro:cylinder_inertia m="110.5" r="${wheel_radius}" h="${wheel_width}"/>
      
    </link>

    <!-- Connect the wheels to the base_link at the appropriate location, and 
         define a continuous joint to allow the wheels to freely rotate about
         an axis -->
    <joint name="${prefix}_joint" type="revolute">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <limit upper="1.79769e+308" lower="-1.79769e+308" effort="100" velocity="1.79769e+308"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <!-- Instantiate two wheels using the macro we just made through the 
       xacro:wheel tags. We also define the parameters to have one wheel
       on both sides at the back of our robot (i.e. x_reflect=-1). -->
  <xacro:wheel prefix="drivewhl_l" x_reflect="-1" y_reflect="1" />
  <xacro:wheel prefix="drivewhl_r" x_reflect="-1" y_reflect="-1" />

  <!-- *********************** CASTER WHEEL ******************************  -->
  <!-- We add a caster wheel. It will be modeled as sphere.
       We define the wheelâ€™s geometry, material and the joint to connect it to 
       base_link at the appropriate location. -->
  <link name="front_caster">
    <visual>
      <geometry>
        <sphere radius="${(wheel_radius+wheel_zoff-(base_height/2))}"/>
      </geometry>
      <material name="White">
        <color rgba="${255/255} ${255/255} ${255/255} 1.0"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="${(wheel_radius+wheel_zoff-(base_height/2))}"/>
      </geometry>
    </collision>
    <xacro:sphere_inertia m="10.05" r="${(wheel_radius+wheel_zoff-(base_height/2))}"/>
  </link>

  <gazebo reference="front_caster">
    <mu1>0.01</mu1>
    <mu2>0.01</mu2>    
  </gazebo>

  <joint name="caster_joint" type="fixed">
    <parent link="base_link"/>
    <child link="front_caster"/>
    <origin xyz="${caster_xoff} 0.0 ${-(base_height/2)}" rpy="0 0 0"/>
  </joint>
  
  <!-- *********************** IMU SETUP *********************************  -->
  <!-- Each sensor must be attached to a link.                              --> 
  
  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="-0.10 0 0.05" rpy="0 0 0"/>
  </joint>

  <link name="imu_link"/>

  <!-- *********************** GPS SETUP **********************************  -->
  <joint name="gps_joint" type="fixed">
    <parent link="base_link"/>
    <child link="gps_link"/>
    <origin xyz="0.10 0 0.05" rpy="0 0 0"/>
  </joint>

  <link name="gps_link"/>

  <!-- *********************  Gazebo Plugin ******************************** -->
  <gazebo>
  	 <plugin
  	  filename="ignition-gazebo-diff-drive-system"
  	  name="ignition::gazebo::systems::DiffDrive">
  	  <left_joint>drivewhl_l_joint</left_joint>  	  
  	  <right_joint>drivewhl_r_joint</right_joint>
  	  <wheel_separation>${base_length}</wheel_separation>
  	  <wheel_radius>${wheel_radius}</wheel_radius>
  	  <odom_publish_frequency>1</odom_publish_frequency>
  	  <topic>/cmd_vel</topic>
  	</plugin> 
    <!--<plugin
      filename="libgazebo_ros_diff_drive.so"
      name="gazebo_ros_diff_drive">
      <robotNamespace>/robot_name</robotNamespace>
      <leftWheelJoint>drivewhl_l_joint</leftWheelJoint>
      <rightWheelJoint>drivewhl_r_joint</rightWheelJoint>
      <wheelSeparation>${base_length}</wheelSeparation>
      <wheelRadius>${wheel_radius}</wheelRadius>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>base_link</robotBaseFrame>
      <publishOdometry>true</publishOdometry>
      <publishWheelTF>true</publishWheelTF>
      <cmdVelTopic>/cmd_vel</cmdVelTopic>
    </plugin>-->
    <!--<plugin
        filename="gz-sim-diff-drive-system"
        name="gz::sim::systems::DiffDrive">
        <left_joint>left_wheel_joint</left_joint>
        <right_joint>right_wheel_joint</right_joint>
        <wheel_separation>1.25</wheel_separation>
        <wheel_radius>0.3</wheel_radius>
        <odom_publish_frequency>1</odom_publish_frequency>
        <max_linear_acceleration>1</max_linear_acceleration>
        <min_linear_acceleration>-1</min_linear_acceleration>
        <max_angular_acceleration>2</max_angular_acceleration>
        <min_angular_acceleration>-2</min_angular_acceleration>
        <max_linear_velocity>0.5</max_linear_velocity>
        <min_linear_velocity>-0.5</min_linear_velocity>
        <max_angular_velocity>1</max_angular_velocity>
        <min_angular_velocity>-1</min_angular_velocity>
        <topic>/cmd_vel</topic>
      </plugin>-->
      <plugin name="apply_force_plugin" filename="libapply_force_plugin.so">
        <force>
          <x>0</x>
          <y>0</y>
          <z>20</z>  <!-- You can change this value as needed -->
        </force>
      </plugin>
  </gazebo>

</robot>

